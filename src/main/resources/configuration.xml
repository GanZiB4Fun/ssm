<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!-- 配置mybatis的缓存，延迟加载等等一系列属性 -->
    <settings>
        <!-- 全局映射器启用缓存 -->
        <setting name="cacheEnabled" value="true"/>
        <!-- 查询时，关闭关联对象即时加载以提高性能 -->
        <setting name="lazyLoadingEnabled" value="false"/>
        <!-- 对于未知的SQL查询，允许返回不同的结果集以达到通用的效果 -->
        <setting name="multipleResultSetsEnabled" value="true"/>
        <!-- 允许使用列标签代替列名 -->
        <setting name="useColumnLabel" value="true"/>
        <!-- 不允许使用自定义的主键值(比如由程序生成的UUID 32位编码作为键值)，数据表的PK生成策略将被覆盖 -->
        <!--<setting name="useGeneratedKeys" value="false"/>-->
        <!-- 给予被嵌套的resultMap以字段-属性的映射支持 FULL,PARTIAL -->
        <!--<setting name="autoMappingBehavior" value="PARTIAL"/>-->
        <!-- 对于批量更新操作缓存SQL以提高性能 BATCH,SIMPLE -->
        <!-- <setting name="defaultExecutorType" value="BATCH" /> -->
        <!-- 数据库超过25000秒仍未响应则超时 -->
        <!-- <setting name="defaultStatementTimeout" value="25000" /> -->
        <!-- 允许使用rowBounds嵌套语句 -->
        <!-- Allows using RowBounds on nested statements -->
        <!--<setting name="safeRowBoundsEnabled" value="false"/>-->
        <!-- 可以从经典的数据库列的名称a_column驼峰命名法java属性名称列自动映射. -->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <!-- MyBatis使用本地缓存以防止循环引用和加快重复嵌套查询。默认情况下（会话）在会话中执行的所有查询都被缓存。如果localcachescope =声明
本地会话将只用于执行的语句，没有共享数据的两种不同的调用之间相同的sqlsession. -->
        <!-- MyBatis uses local cache to prevent circular references and speed up repeated nested queries. By default (SESSION) all queries executed during a session are cached. If localCacheScope=STATEMENT
            local session will be used just for statement execution, no data will be shared between two different calls to the same SqlSession. -->
        <!--<setting name="localCacheScope" value="SESSION"/>-->
        <!-- 应该提醒的JDBC类型值为零的时候，没有什么特异的JDBC提供的类型参数。一些驱动不需要指定的柱型通用JDBC与他人的价值观
样的零，或其他. -->
        <!-- Specifies the JDBC type for null values when no specific JDBC type was provided for the parameter. Some drivers require specifying the column JDBC type but others work with generic values
            like NULL, VARCHAR or OTHER. -->
        <!--<setting name="jdbcTypeForNull" value="OTHER"/>-->
        <!-- 指定哪些对象的方法触发了一个懒惰的负载 -->
        <!-- Specifies which Object's methods trigger a lazy load -->
        <!--<setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>-->
        <!-- 设置关联对象加载的形态，此处为按需加载字段(加载字段由SQL指 定)，不会加载关联表的所有字段，以提高性能 -->
        <!--<setting name="aggressiveLazyLoading" value="true"/>-->
    </settings>

</configuration>